// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.


// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;

# Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href="/docs/api/orders/v2/">Orders API</a>. For more information, see the <a href="/docs/checkout/">PayPal Checkout Overview</a>.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api-m.sandbox.paypal.com") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Show details for authorized payment
    #
    # + authorization_id - The PayPal-generated ID for the authorized payment to void.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body that shows authorization details. 
    resource isolated function get v2/payments/authorizations/[string authorization_id](map<string|string[]> headers = {}) returns authorization\-2|error {
        string resourcePath = string `/v2/payments/authorizations/${getEncodedUri(authorization_id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Capture authorized payment
    #
    # + authorization_id - The PayPal-generated ID for the authorized payment to void.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP <code>201 Created</code> status code and a JSON response body that shows captured payment details. 
    resource isolated function post v2/payments/authorizations/[string authorization_id]/capture(capture_request payload, AuthorizationsCaptureHeaders headers = {}) returns capture\-2|error {
        string resourcePath = string `/v2/payments/authorizations/${getEncodedUri(authorization_id)}/capture`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Reauthorize authorized payment
    #
    # + authorization_id - The PayPal-generated ID for the authorized payment to void.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP <code>201 Created</code> status code and a JSON response body that shows the reauthorized payment details. 
    resource isolated function post v2/payments/authorizations/[string authorization_id]/reauthorize(reauthorize_request payload, AuthorizationsReauthorizeHeaders headers = {}) returns authorization\-2|error {
        string resourcePath = string `/v2/payments/authorizations/${getEncodedUri(authorization_id)}/reauthorize`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Void authorized payment
    #
    # + authorization_id - The PayPal-generated ID for the authorized payment to void.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body that shows authorization details. This response is returned when the Prefer header is set to return=representation. 
    resource isolated function post v2/payments/authorizations/[string authorization_id]/void(AuthorizationsVoidHeaders headers = {}) returns authorization\-2|error? {
        string resourcePath = string `/v2/payments/authorizations/${getEncodedUri(authorization_id)}/void`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Show captured payment details
    #
    # + capture_id - The PayPal-generated ID for the captured payment to refund.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body that shows captured payment details. 
    resource isolated function get v2/payments/captures/[string capture_id](map<string|string[]> headers = {}) returns capture\-2|error {
        string resourcePath = string `/v2/payments/captures/${getEncodedUri(capture_id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Refund captured payment
    #
    # + capture_id - The PayPal-generated ID for the captured payment to refund.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP <code>201 Created</code> status code and a JSON response body that shows refund details. 
    resource isolated function post v2/payments/captures/[string capture_id]/refund(refund_request payload, CapturesRefundHeaders headers = {}) returns refund|error {
        string resourcePath = string `/v2/payments/captures/${getEncodedUri(capture_id)}/refund`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Show refund details
    #
    # + refund_id - The PayPal-generated ID for the refund for which to show details.
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body that shows refund details. 
    resource isolated function get v2/payments/refunds/[string refund_id](map<string|string[]> headers = {}) returns refund|error {
        string resourcePath = string `/v2/payments/refunds/${getEncodedUri(refund_id)}`;
        return self.clientEp->get(resourcePath, headers);
    }
}
