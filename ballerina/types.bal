// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/http;

# OAuth2 Client Credentials Grant Configs
public type OAuth2ClientCredentialsGrantConfig record {|
    *http:OAuth2ClientCredentialsGrantConfig;
    # Token URL
    string tokenUrl = "https://api-m.sandbox.paypal.com/v1/oauth2/token";
|};

public type CaptureAllOf2 record {
    # The PayPal-generated ID for the captured payment.
    string id?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money amount?;
    # The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.
    string invoice_id?;
    # The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
    @constraint:String {maxLength: 127}
    string custom_id?;
    # Reference values used by the card network to identify a transaction.
    network_transaction_reference network_transaction_reference?;
    # The level of protection offered as defined by [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection).
    seller_protection seller_protection?;
    # Indicates whether you can make additional captures against the authorized payment. Set to `true` if you do not intend to capture additional payments against the authorization. Set to `false` if you intend to capture additional payments against the authorization.
    boolean final_capture = false;
    # The detailed breakdown of the capture activity. This is not available for transactions that are in pending state.
    seller_receivable_breakdown seller_receivable_breakdown?;
    # The funds that are held on behalf of the merchant.
    disbursement_mode disbursement_mode?;
    # An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
    link_description[] links?;
    # The processor response information for payment requests, such as direct credit card transactions.
    processor_response processor_response?;
};

public type AuthorizationAllOf2 record {
    # The PayPal-generated ID for the authorized payment.
    string id?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money amount?;
    # The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.
    string invoice_id?;
    # The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
    @constraint:String {maxLength: 127}
    string custom_id?;
    # Reference values used by the card network to identify a transaction.
    network_transaction_reference network_transaction_reference?;
    # The level of protection offered as defined by [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection).
    seller_protection seller_protection?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time expiration_time?;
    # An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
    link_description[] links?;
};

public type Authorization2AllOf2 record {
    # The supplementary data.
    supplementary_data supplementary_data?;
    # The details for the merchant who receives the funds and fulfills the order. The merchant is also known as the payee.
    payee_base payee?;
};

# Represents the Headers record for the operation: authorizations.reauthorize
public type AuthorizationsReauthorizeHeaders record {
    # The server stores keys for 45 days.
    string PayPal\-Request\-Id?;
    # The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    string Prefer = "return=minimal";
};

# The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
public type link_description record {
    # The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call.
    string href;
    # The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml).
    string rel;
    # The HTTP method required to make the related call.
    "GET"|"POST"|"PUT"|"DELETE"|"HEAD"|"CONNECT"|"OPTIONS"|"PATCH" method?;
};

# Any additional payment instructions to be consider during payment processing. This processing instruction is applicable for Capturing an order or Authorizing an Order.
public type payment_instruction record {
    # An array of various fees, commissions, tips, or donations. This field is only applicable to merchants that been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability.
    @constraint:Array {maxLength: 1}
    platform_fee[] platform_fees?;
    # The funds that are held on behalf of the merchant.
    disbursement_mode disbursement_mode?;
    # This field is only enabled for selected merchants/partners to use and provides the ability to trigger a specific pricing rate/plan for a payment transaction. The list of eligible 'payee_pricing_tier_id' would be provided to you by your Account Manager. Specifying values other than the one provided to you by your account manager would result in an error.
    @constraint:String {maxLength: 20, minLength: 1, pattern: re `^.*$`}
    string payee_pricing_tier_id?;
    # FX identifier generated returned by PayPal to be used for payment processing in order to honor FX rate (for eligible integrations) to be used when amount is settled/received into the payee account.
    @constraint:String {maxLength: 4000, minLength: 1, pattern: re `^.*$`}
    string payee_receivable_fx_rate_id?;
};

# The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.
@constraint:String {maxLength: 3, minLength: 3}
public type currency_code string;

# The details of the refund status.
public type refund_status_details record {
    # The reason why the refund has the `PENDING` or `FAILED` status.
    "ECHECK" reason?;
};

# The net amount. Returned when the currency of the refund is different from the currency of the PayPal account where the merchant holds their funds.
public type net_amount_breakdown_item record {
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money payable_amount?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money converted_amount?;
    # The exchange rate that determines the amount to convert from one currency to another currency.
    exchange_rate exchange_rate?;
};

# The authorized payment transaction.
public type authorization record {
    *authorization_status;
    *AuthorizationAllOf2;
    *activity_timestamps;
};

# The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
@constraint:String {maxLength: 64, minLength: 20, pattern: re `^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$`}
public type date_time string;

# The capture identification-related fields. Includes the invoice ID, custom ID, note to payer, and soft descriptor.
public type supplementary_purchase_data record {
    # The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.
    @constraint:String {maxLength: 127, minLength: 1, pattern: re `^.{1,127}$`}
    string invoice_id?;
    # An informational note about this settlement. Appears in both the payer's transaction history and the emails that the payer receives.
    @constraint:String {maxLength: 255, minLength: 1, pattern: re `^.{1,255}$`}
    string note_to_payer?;
};

# The card network or brand. Applies to credit, debit, gift, and payment cards.
public type card_brand "VISA"|"MASTERCARD"|"DISCOVER"|"AMEX"|"SOLO"|"JCB"|"STAR"|"DELTA"|"SWITCH"|"MAESTRO"|"CB_NATIONALE"|"CONFIGOGA"|"CONFIDIS"|"ELECTRON"|"CETELEM"|"CHINA_UNION_PAY";

# The details of the authorized payment status.
public type authorization_status_details record {
    # The reason why the authorized status is `PENDING`.
    "PENDING_REVIEW" reason?;
};

# Captures either a portion or the full authorized amount of an authorized payment.
public type capture_request record {
    *supplementary_purchase_data;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money amount?;
    # The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.
    string invoice_id?;
    # Indicates whether you can make additional captures against the authorized payment. Set to `true` if you do not intend to capture additional payments against the authorization. Set to `false` if you intend to capture additional payments against the authorization.
    boolean final_capture = false;
    # Any additional payment instructions to be consider during payment processing. This processing instruction is applicable for Capturing an order or Authorizing an Order.
    payment_instruction payment_instruction?;
    # An informational note about this settlement. Appears in both the payer's transaction history and the emails that the payer receives.
    string note_to_payer?;
    # The payment descriptor on the payer's account statement.
    string soft_descriptor?;
};

# The status fields for an authorized payment.
public type authorization_status record {
    # The status for the authorized payment.
    "CREATED"|"CAPTURED"|"DENIED"|"PARTIALLY_CAPTURED"|"VOIDED"|"PENDING" status?;
    # The details of the authorized payment status.
    authorization_status_details status_details?;
};

# The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
@constraint:String {maxLength: 254, minLength: 3}
public type email string;

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    OAuth2ClientCredentialsGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

# The funds that are held on behalf of the merchant.
public type disbursement_mode "INSTANT"|"DELAYED";

# The level of protection offered as defined by [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection).
public type seller_protection record {
    # Indicates whether the transaction is eligible for seller protection. For information, see [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection).
    "ELIGIBLE"|"PARTIALLY_ELIGIBLE"|"NOT_ELIGIBLE" status?;
    # An array of conditions that are covered for the transaction.
    ("ITEM_NOT_RECEIVED"|"UNAUTHORIZED_TRANSACTION")[] dispute_categories?;
};

# Refunds a captured payment, by ID. For a full refund, include an empty request body. For a partial refund, include an <code>amount</code> object in the request body.
public type refund_request record {
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money amount?;
    # The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports. The pattern is defined by an external party and supports Unicode.
    @constraint:String {maxLength: 127, minLength: 1, pattern: re `^.*$`}
    string custom_id?;
    # The API caller-provided external invoice ID for this order. The pattern is defined by an external party and supports Unicode.
    @constraint:String {maxLength: 127, minLength: 1, pattern: re `^.*$`}
    string invoice_id?;
    # The reason for the refund. Appears in both the payer's transaction history and the emails that the payer receives. The pattern is defined by an external party and supports Unicode.
    @constraint:String {maxLength: 255, minLength: 1, pattern: re `^.*$`}
    string note_to_payer?;
    # Any additional payments instructions during refund payment processing. This object is only applicable to merchants that have been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability. Please speak to your account manager if you want to use this capability.
    payment_instruction\-2 payment_instruction?;
};

# The refund status.
public type refund_status record {
    # The status of the refund.
    "CANCELLED"|"FAILED"|"PENDING"|"COMPLETED" status?;
    # The details of the refund status.
    refund_status_details status_details?;
};

# Reference values used by the card network to identify a transaction.
public type network_transaction_reference record {
    # Transaction reference id returned by the scheme. For Visa and Amex, this is the "Tran id" field in response. For MasterCard, this is the "BankNet reference id" field in response. For Discover, this is the "NRID" field in response. The pattern we expect for this field from Visa/Amex/CB/Discover is numeric, Mastercard/BNPP is alphanumeric and Paysecure is alphanumeric with special character -.
    @constraint:String {maxLength: 36, minLength: 9, pattern: re `^[a-zA-Z0-9-]+$`}
    string id;
    # The date that the transaction was authorized by the scheme. This field may not be returned for all networks. MasterCard refers to this field as "BankNet reference date.
    @constraint:String {maxLength: 4, minLength: 4, pattern: re `^[0-9]+$`}
    string date?;
    # The card network or brand. Applies to credit, debit, gift, and payment cards.
    card_brand network?;
    # Reference ID issued for the card transaction. This ID can be used to track the transaction across processors, card brands and issuing banks.
    @constraint:String {maxLength: 36, minLength: 1, pattern: re `^[a-zA-Z0-9]+$`}
    string acquirer_reference_number?;
};

# The exchange rate that determines the amount to convert from one currency to another currency.
public type exchange_rate record {
    # The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.
    currency_code source_currency?;
    # The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.
    currency_code target_currency?;
    # The target currency amount. Equivalent to one unit of the source currency. Formatted as integer or decimal value with one to 15 digits to the right of the decimal point.
    string value?;
};

# Represents the Headers record for the operation: captures.refund
public type CapturesRefundHeaders record {
    # The server stores keys for 45 days.
    string PayPal\-Request\-Id?;
    # An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see [PayPal-Auth-Assertion](/docs/api/reference/api-requests/#paypal-auth-assertion).<blockquote><strong>Note:</strong>For three party transactions in which a partner is managing the API calls on behalf of a merchant, the partner must identify the merchant using either a PayPal-Auth-Assertion header or an access token with target_subject.</blockquote>
    string PayPal\-Auth\-Assertion?;
    # The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    string Prefer = "return=minimal";
};

# Represents the Headers record for the operation: authorizations.void
public type AuthorizationsVoidHeaders record {
    # An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see [PayPal-Auth-Assertion](/docs/api/reference/api-requests/#paypal-auth-assertion).<blockquote><strong>Note:</strong>For three party transactions in which a partner is managing the API calls on behalf of a merchant, the partner must identify the merchant using either a PayPal-Auth-Assertion header or an access token with target_subject.</blockquote>
    string PayPal\-Auth\-Assertion?;
    # The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    string Prefer = "return=minimal";
};

# The status of a captured payment.
public type capture_status record {
    # The status of the captured payment.
    "COMPLETED"|"DECLINED"|"PARTIALLY_REFUNDED"|"PENDING"|"REFUNDED"|"FAILED" status?;
    # The details of the captured payment status.
    capture_status_details status_details?;
};

# A captured payment.
public type capture record {
    *capture_status;
    *CaptureAllOf2;
    *activity_timestamps;
};

public type authorization\-2 record {
    *authorization;
    *Authorization2AllOf2;
};

# The details of the captured payment status.
public type capture_status_details record {
    # The reason why the captured payment status is `PENDING` or `DENIED`.
    "BUYER_COMPLAINT"|"CHARGEBACK"|"ECHECK"|"INTERNATIONAL_WITHDRAWAL"|"OTHER"|"PENDING_REVIEW"|"RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION"|"REFUNDED"|"TRANSACTION_APPROVED_AWAITING_FUNDING"|"UNILATERAL"|"VERIFICATION_REQUIRED" reason?;
};

public type payment_instruction\-2 record {
    platform_fee[] platform_fees?;
};

# The platform or partner fee, commission, or brokerage fee that is associated with the transaction. Not a separate or isolated transaction leg from the external perspective. The platform fee is limited in scope and is always associated with the original payment for the purchase unit.
public type platform_fee record {
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money amount;
    # The details for the merchant who receives the funds and fulfills the order. The merchant is also known as the payee.
    payee_base payee?;
};

# The supplementary data.
public type supplementary_data record {
    # Identifiers related to a specific resource.
    related_ids related_ids?;
};

# The breakdown of the refund.
public type MerchantPayableBreakdown record {
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money gross_amount?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money paypal_fee?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money paypal_fee_in_receivable_currency?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money net_amount?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money net_amount_in_receivable_currency?;
    # An array of platform or partner fees, commissions, or brokerage fees for the refund.
    @constraint:Array {maxLength: 1}
    platform_fee[] platform_fees?;
    # An array of breakdown values for the net amount. Returned when the currency of the refund is different from the currency of the PayPal account where the payee holds their funds.
    net_amount_breakdown_item[] net_amount_breakdown?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money total_refunded_amount?;
};

# The account identifier for a PayPal account.
@constraint:String {maxLength: 13, minLength: 13, pattern: re `^[2-9A-HJ-NP-Z]{13}$`}
public type account_id string;

public type capture\-2 record {
    *capture;
    *Capture2AllOf2;
};

# The currency and amount for a financial transaction, such as a balance or payment due.
public type money record {
    # The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.
    currency_code currency_code;
    # The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency Codes](/api/rest/reference/currency-codes/).
    @constraint:String {maxLength: 32, pattern: re `^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$`}
    string value;
};

public type Capture2AllOf2 record {
    # The supplementary data.
    supplementary_data supplementary_data?;
    # The details for the merchant who receives the funds and fulfills the order. The merchant is also known as the payee.
    payee_base payee?;
};

# Reauthorizes an authorized PayPal account payment, by ID. To ensure that funds are still available, reauthorize a payment after its initial three-day honor period expires. You can reauthorize a payment only once from days four to 29.<br/><br/>If 30 days have transpired since the date of the original authorization, you must create an authorized payment instead of reauthorizing the original authorized payment.<br/><br/>A reauthorized payment itself has a new honor period of three days.<br/><br/>You can reauthorize an authorized payment once. The allowed amount depends on context and geography, for example in US it is up to 115% of the original authorized amount, not to exceed an increase of $75 USD.<br/><br/>Supports only the `amount` request parameter.<blockquote><strong>Note:</strong> This request is currently not supported for Partner use cases.</blockquote>
public type reauthorize_request record {
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money amount?;
};

# The detailed breakdown of the capture activity. This is not available for transactions that are in pending state.
public type seller_receivable_breakdown record {
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money gross_amount;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money paypal_fee?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money paypal_fee_in_receivable_currency?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money net_amount?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money receivable_amount?;
    # The exchange rate that determines the amount to convert from one currency to another currency.
    exchange_rate exchange_rate?;
    # An array of platform or partner fees, commissions, or brokerage fees that associated with the captured payment.
    @constraint:Array {maxLength: 1}
    platform_fee[] platform_fees?;
};

# Identifiers related to a specific resource.
public type related_ids record {
    # Order ID related to the resource.
    @constraint:String {maxLength: 20, minLength: 1, pattern: re `^[A-Z0-9]+$`}
    string order_id?;
    # Authorization ID related to the resource.
    @constraint:String {maxLength: 20, minLength: 1, pattern: re `^[A-Z0-9]+$`}
    string authorization_id?;
    # Capture ID related to the resource.
    @constraint:String {maxLength: 20, minLength: 1, pattern: re `^[A-Z0-9]+$`}
    string capture_id?;
};

public type RefundAllOf2 record {
    # The PayPal-generated ID for the refund.
    string id?;
    # The currency and amount for a financial transaction, such as a balance or payment due.
    money amount?;
    # The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.
    string invoice_id?;
    # The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.
    @constraint:String {maxLength: 127, minLength: 1, pattern: re `^[A-Za-z0-9-_.,]*$`}
    string custom_id?;
    # Reference ID issued for the card transaction. This ID can be used to track the transaction across processors, card brands and issuing banks.
    @constraint:String {maxLength: 36, minLength: 1, pattern: re `^[a-zA-Z0-9]+$`}
    string acquirer_reference_number?;
    # The reason for the refund. Appears in both the payer's transaction history and the emails that the payer receives.
    string note_to_payer?;
    # The breakdown of the refund.
    MerchantPayableBreakdown seller_payable_breakdown?;
    # The details for the merchant who receives the funds and fulfills the order. The merchant is also known as the payee.
    payee_base payer?;
    # An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
    link_description[] links?;
};

# The processor response information for payment requests, such as direct credit card transactions.
public type processor_response record {
    # The address verification code for Visa, Discover, Mastercard, or American Express transactions.
    "A"|"B"|"C"|"D"|"E"|"F"|"G"|"I"|"M"|"N"|"P"|"R"|"S"|"U"|"W"|"X"|"Y"|"Z"|"Null"|"0"|"1"|"2"|"3"|"4" avs_code?;
    # The card verification value code for for Visa, Discover, Mastercard, or American Express.
    "E"|"I"|"M"|"N"|"P"|"S"|"U"|"X"|"All others"|"0"|"1"|"2"|"3"|"4" cvv_code?;
    # Processor response code for the non-PayPal payment processor errors.
    "0000"|"00N7"|"0100"|"0390"|"0500"|"0580"|"0800"|"0880"|"0890"|"0960"|"0R00"|"1000"|"10BR"|"1300"|"1310"|"1312"|"1317"|"1320"|"1330"|"1335"|"1340"|"1350"|"1352"|"1360"|"1370"|"1380"|"1382"|"1384"|"1390"|"1393"|"5100"|"5110"|"5120"|"5130"|"5135"|"5140"|"5150"|"5160"|"5170"|"5180"|"5190"|"5200"|"5210"|"5400"|"5500"|"5650"|"5700"|"5710"|"5800"|"5900"|"5910"|"5920"|"5930"|"5950"|"6300"|"7600"|"7700"|"7710"|"7800"|"7900"|"8000"|"8010"|"8020"|"8030"|"8100"|"8110"|"8220"|"9100"|"9500"|"9510"|"9520"|"9530"|"9540"|"9600"|"PCNR"|"PCVV"|"PP06"|"PPRN"|"PPAD"|"PPAB"|"PPAE"|"PPAG"|"PPAI"|"PPAR"|"PPAU"|"PPAV"|"PPAX"|"PPBG"|"PPC2"|"PPCE"|"PPCO"|"PPCR"|"PPCT"|"PPCU"|"PPD3"|"PPDC"|"PPDI"|"PPDV"|"PPDT"|"PPEF"|"PPEL"|"PPER"|"PPEX"|"PPFE"|"PPFI"|"PPFR"|"PPFV"|"PPGR"|"PPH1"|"PPIF"|"PPII"|"PPIM"|"PPIT"|"PPLR"|"PPLS"|"PPMB"|"PPMC"|"PPMD"|"PPNC"|"PPNL"|"PPNM"|"PPNT"|"PPPH"|"PPPI"|"PPPM"|"PPQC"|"PPRE"|"PPRF"|"PPRR"|"PPS0"|"PPS1"|"PPS2"|"PPS3"|"PPS4"|"PPS5"|"PPS6"|"PPSC"|"PPSD"|"PPSE"|"PPTE"|"PPTF"|"PPTI"|"PPTR"|"PPTT"|"PPTV"|"PPUA"|"PPUC"|"PPUE"|"PPUI"|"PPUP"|"PPUR"|"PPVC"|"PPVE"|"PPVT" response_code?;
    # The declined payment transactions might have payment advice codes. The card networks, like Visa and Mastercard, return payment advice codes.
    "01"|"02"|"03"|"21" payment_advice_code?;
};

# The date and time stamps that are common to authorized payment, captured payment, and refund transactions.
public type activity_timestamps record {
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time create_time?;
    # The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
    date_time update_time?;
};

# The details for the merchant who receives the funds and fulfills the order. The merchant is also known as the payee.
public type payee_base record {
    # The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
    email email_address?;
    # The account identifier for a PayPal account.
    account_id merchant_id?;
};

# Represents the Headers record for the operation: authorizations.capture
public type AuthorizationsCaptureHeaders record {
    # The server stores keys for 45 days.
    string PayPal\-Request\-Id?;
    # The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    string Prefer = "return=minimal";
};

# The refund information.
public type refund record {
    *refund_status;
    *RefundAllOf2;
    *activity_timestamps;
};
